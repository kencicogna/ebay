#!/usr/bin/perl -w 
# generated by wxGlade 0.6.5 (standalone edition) on Fri Nov 30 13:55:30 2012
# To get wxPerl visit http://wxPerl.sourceforge.net/

use strict;
use LWP::UserAgent;
use LWP::Simple;
use HTTP::Request;
use HTTP::Headers;
use DBI;
use XML::Simple qw(XMLin XMLout);
use Date::Calc 'Today';
use Data::Dumper 'Dumper';			$Data::Dumper::Sortkeys = 1;
use File::Copy qw(copy move);
use POSIX;
use Getopt::Std;
use Storable 'dclone';

use lib '../cfg';
use EbayConfig;


my %opts;
getopts('i:raDo:m:w:e:P',\%opts);

# -a    => All items processing
# -i    => Item id of single itme to processing
# -r    => Revise item(s) on ebay
# -o    => Output file - items that need shipping cost fixed
# -e    => Error file - items without weights
# -w    => Weight of single item ( only used with -i )
# -m    => Max number of items to process (debugging. use with -a)
# -D    => Debug mode
# -P    => Production DB connection

my $single_item_id;
my $process_all_items = 0;
my $weight_in;

if ( defined $opts{i} ) {
	$single_item_id = $opts{i};
	$weight_in = $opts{w} ? $opts{w} : 0;
}
elsif ( defined $opts{a} ) {
  $process_all_items = 1;
}
else {
	die "must supply either option '-i <item id>' or '-a' option";
}

my $max_items           = defined $opts{m} ? $opts{m} : 0;
my $REVISE_ITEM         = defined $opts{r} ? 1 : 0;
my $DEBUG               = defined $opts{D} ? 1 : 0;
my $outfile             = defined $opts{o} ? $opts{o} : 'shipping_cost_fix.csv';
$outfile .= '.csv' if ( $outfile !~ /.*\.csv$/i );
my $noweightfile        = defined $opts{e} ? $opts{e} : 'shipping_cost_fix.noweights.csv';
$noweightfile .= '.csv' if ( $noweightfile !~ /.*\.csv$/i );

my $errfile = 'shipping_cost_fix.errors.csv';
my $connect_string = $opts{P} ? 'DBI:ODBC:BTData_PROD_SQLEXPRESS' : 'DBI:ODBC:BTData_DEV_SQLEXPRESS';
print STDERR "\n*\n* Connection string: $connect_string\n*\n\n";

###################################################
# EBAY API INFO                                   #
###################################################

# define the HTTP header
my $header = $EbayConfig::ES_http_header;

# eBayAuthToken
my $eBayAuthToken = $EbayConfig::ES_eBayAuthToken;

# define the XML request
my $request_reviseitem_default = <<END_XML;
<?xml version='1.0' encoding='utf-8'?>
<ReviseFixedPriceItemRequest xmlns="urn:ebay:apis:eBLBaseComponents">
<RequesterCredentials>
  <eBayAuthToken>$eBayAuthToken</eBayAuthToken>
</RequesterCredentials>
<WarningLevel>High</WarningLevel>
<Item>
<ItemID>__ItemID__</ItemID>
__SHIPPING_DETAILS__
</Item>
</ReviseFixedPriceItemRequest>
END_XML
#__Quantity_Info__

my $request_getitem_default = <<END_XML;
<?xml version='1.0' encoding='utf-8'?>
<GetItemRequest xmlns="urn:ebay:apis:eBLBaseComponents">
<RequesterCredentials>
  <eBayAuthToken>$eBayAuthToken</eBayAuthToken>
</RequesterCredentials>
<WarningLevel>High</WarningLevel>
<ItemID>__ItemID__</ItemID>
</GetItemRequest>
END_XML

my $request_getmyebayselling = <<END_XML;
<?xml version='1.0' encoding='utf-8'?>
<GetMyeBaySellingRequest xmlns="urn:ebay:apis:eBLBaseComponents">
<RequesterCredentials>
  <eBayAuthToken>$eBayAuthToken</eBayAuthToken>
</RequesterCredentials>
<WarningLevel>High</WarningLevel>
<ActiveList>
	<Include>true</Include>
	<Pagination>
		<EntriesPerPage>200</EntriesPerPage>
		<PageNumber>__PAGE_NUMBER__</PageNumber>
	</Pagination>
</ActiveList>
</GetMyeBaySellingRequest>
END_XML

my $request_GetShippingDiscountProfiles = <<END_XML;
<?xml version='1.0' encoding='utf-8'?>
<GetShippingDiscountProfilesRequest xmlns="urn:ebay:apis:eBLBaseComponents">
<RequesterCredentials>
  <eBayAuthToken>$eBayAuthToken</eBayAuthToken>
</RequesterCredentials>
<WarningLevel>High</WarningLevel>
</GetShippingDiscountProfilesRequest>
END_XML


########################################
# SQL
########################################

# get weight from database (Should represent all active Ebay listings)!
my $sql_get_weight = <<END_SQL;
	select ROW_NUMBER() over(order by a.eBayItemID) as id, a.*
	  from ( select eBayItemID, Title, MAX(weight) as weight 
             from tty_StorageLocation 
            where active = 1
            group by eBayItemID, Title ) a
END_SQL

# get cost from database (at variation level)
my $sql_get_cost = <<END_SQL;
	select ROW_NUMBER() over(order by a.eBayItemID) as id, a.*
	  from ( select eBayItemID, Title, variation, cost 
             from tty_StorageLocation 
            where active = 1
         ) a
END_SQL


########################################
# Open Output Files
########################################
open my $outfh, '>', $outfile or die "can't open file";
open my $noweight_fh, '>', $noweightfile or die "can't open file";
open my $err_fh, '>', $errfile or die "can't open file";

my $dbh;
my ($sth,$sthtv);
my $items = {};   # all items by row number
my $itemsid = {}; # all items by EbayItemID
my $itemst  = {}; # items by title
my $itemstv = {}; # items by title / variation


################################################
# Get Item info from Database (Cost/Weights)
################################################
if ( $single_item_id && $weight_in ) {
	# short cut, if the user is only processing one item and has provide the weight
	#            also a way around not having access to the database when testing
  for my $i ( split(',',$single_item_id) ) {
	  $items->{$i}->{weight} = $weight_in;
  }
}
else {
	# Connect to Database
	eval {
		# Open database connection
		$dbh =
		DBI->connect( $connect_string, 'shipit', 'shipit',
									{ 
										RaiseError       => 0, 
										AutoCommit       => 1, 
										FetchHashKeyName => 'NAME_lc',
										LongReadLen      => 32768,
									} 
							  )
		|| die "\n\nDatabase connection not made: $DBI::errstr\n\n";
	};

	die "$@"
		if ($@);

	# Get all item weights from tty_storageLocation by TITLE
	$sth = $dbh->prepare( $sql_get_weight ) or die "can't prepare stmt";
	$sth->execute() or die "can't execute stmt";
	$items = $sth->fetchall_hashref('id') or die "can't fetch results";						

  # Create title / variation lookup, and ebayitemid lookup
  for my $id ( keys %$items ) {
    $itemsid->{ $items->{$id}->{ebayitemid} } = $items->{$id};
    $itemst->{ $items->{$id}->{title} } = $items->{$id};
  }

	# Get all item costs from tty_storageLocation by TITLE/VARIATION
	$sthtv = $dbh->prepare( $sql_get_cost ) or die "can't prepare stmt";
	$sthtv->execute() or die "can't execute stmt";
	$items = $sthtv->fetchall_hashref('id') or die "can't fetch results";						

  # Create title / variation lookup, and ebayitemid lookup
  for my $id ( keys %$items ) {
    $itemstv->{ $items->{$id}->{title} }->{ $items->{$id}->{variation} } = $items->{$id};
  }
}

my $response_hash;
my $request;
my %all_shipping_profiles;


################################################################################
# Get Ebay Flat shipping discount profiles
################################################################################
$header->remove_header('X-EBAY-API-CALL-NAME');
$header->push_header('X-EBAY-API-CALL-NAME' => 'GetShippingDiscountProfiles');
$request = $request_GetShippingDiscountProfiles;
$response_hash = submit_request( $request, $header );
my $FlatShippingDiscount = $response_hash->{FlatShippingDiscount}->{DiscountProfile};
for my $sp ( @{$FlatShippingDiscount} ) {
	my $key =  sprintf( "%0.2f", $sp->{EachAdditionalAmount} ); 

  # get rid of duplicate dicount profiles, only keep the ones that are in the right format 
  next if ( $sp->{DiscountProfileName} !~ /add_[0-9.]+_addl/ );
  if ( exists $all_shipping_profiles{ "$key" } ) {
    print Dumper($sp);
    print Dumper($all_shipping_profiles{ "$key" });
    die "$key - discount profile already exists";
  }

	$all_shipping_profiles{ "$key" }->{EachAdditionalAmount} = $sp->{EachAdditionalAmount};
	$all_shipping_profiles{ "$key" }->{DiscountProfileName} = $sp->{DiscountProfileName};
	$all_shipping_profiles{ "$key" }->{DiscountProfileID} = $sp->{DiscountProfileID};
}


################################################################################
# GET LIST OF ACTIVE ITEM_ID's *** FROM EBAY ***
################################################################################
$header->remove_header('X-EBAY-API-CALL-NAME');
$header->push_header('X-EBAY-API-CALL-NAME' => 'GetMyeBaySelling');

my @all_items;
my $pagenumber=1;
my $maxpages=1000000;

if ( $process_all_items ) {
	while ( $pagenumber <= $maxpages ) {
		$request = $request_getmyebayselling;
		$request =~ s/__PAGE_NUMBER__/$pagenumber/;
		$response_hash = submit_request( $request, $header );
		for my $i ( @{$response_hash->{ActiveList}->{ItemArray}->{Item}} ) {
			push(@all_items, $i->{ItemID});
		}
		if ($pagenumber==1) {
			$maxpages = $response_hash->{ActiveList}->{PaginationResult}->{TotalNumberOfPages};
		}
		$pagenumber++;
	}
}
else {
	@all_items = split(',',$single_item_id);
}
print STDERR "Total Items: ",scalar @all_items,"\n";

# Write output header row to output file
print $outfh qq/"eBayItemID","Title","Oz.","New Shipping Cost R.O.W.","New ShippingCost C.A."/;
print $noweight_fh qq/"eBayItemID","Title"/;
print $err_fh qq/"eBayItemID","Title","Error Message"\n/;


################################################################################
#
# Loop over each item_id from Ebay
#
################################################################################
my $item_count=0;
for my $item_id ( @all_items ) {

	$item_count++;
	# GET SINGLE ITEM DETAILS - EBAY API 'GetItem' call
	$request = $request_getitem_default;
	$request =~ s/__ItemID__/$item_id/;
	$header->remove_header('X-EBAY-API-CALL-NAME');
	$header->push_header  ('X-EBAY-API-CALL-NAME' => 'GetItem');
	$response_hash = submit_request( $request, $header );

	my $r = $response_hash->{Item};
	my $title  = $r->{Title};

  ################################################################################ 
  # Must be in database to get COST  (fyi- cost is at the variation level)
	if ( ! defined $itemsid->{$item_id} ) {
    print $err_fh qq($item_id,$title,"item id not in database"\n);
    next;
  }

	if ( ! defined $itemst->{$title} ) {
    print $err_fh qq($item_id,$title,"title not in database"\n);
    next;
  }

  ################################################################################ 
	# Get weight from database OR from ebay

  # Get weight from Ebay first (if defined and weight is positive)
  my $lbs = defined $r->{ShippingPackageDetails}->{WeightMajor}->{content} ? int($r->{ShippingPackageDetails}->{WeightMajor}->{content}) : 0;
  my $ozs = defined $r->{ShippingPackageDetails}->{WeightMinor}->{content} ? int($r->{ShippingPackageDetails}->{WeightMinor}->{content}) : 0;
  $ozs = ( $lbs * 16 ) + $ozs;

  # Get weight from database
	if ( ! $ozs && defined $itemst->{$title} && $itemsid->{$item_id} ) {
	  $ozs = int($items->{$item_id}->{weight}||'0');
	}

	if ( ! $ozs ) {
		print STDERR "\nITEM ID: '$item_id' - TITLE: '$title' -- no weight";
		print $noweight_fh "\n$item_id,$title";
		#next; --> NOTE: moved this down by revise item, to give the item the opportunity to fall out also do to not having intl shipping info
	}

	# Get Ebay Shipping info - mailclass/price
	my $spd = $r->{ShippingPackageDetails};
	my $sd  = $r->{ShippingDetails};
	my $shipping_details = dclone($sd);

	#
	## INTERNATIONAL SERVICES
	#
	my $addl_item_cost;
	my $addl_item_cost_profile;
	my $new_cost_row;
	my $new_cost_ca;

	if ( defined $sd->{InternationalShippingServiceOption} ) { # this is optional
		# Calculate new rates and add them to $shipping_details
		$new_cost_row  = 2.49 + (.50 * $ozs);
		$new_cost_ca   = 2.49 + (.35 * $ozs);

		# Calculate addl_item_cost and addl_item_cost_profile for all intl locations
		$addl_item_cost = (.50 * $ozs) + .50;

		$new_cost_ca = $addl_item_cost
		  if ( $new_cost_ca < $addl_item_cost );

		my $addl_item_cost_string = sprintf("%0.2f", $addl_item_cost );
		if ( defined $all_shipping_profiles{ $addl_item_cost_string } ) { 
			$addl_item_cost_profile = $all_shipping_profiles{ $addl_item_cost_string };
		} else {
			print STDERR "\nWARNING: NO SHIPPING PROFILE FOUND FOR COST '$addl_item_cost_string'";
			print STDERR "\n  ($item_id) $title\n";
			print $err_fh qq/$item_id,"$title","No shipping profile for cost '$addl_item_cost_string'"\n/;
			next;
		}

		$sd->{InternationalShippingDiscountProfileID} = $addl_item_cost_profile->{DiscountProfileID};
    $sd->{InternationalFlatShippingDiscount} = 
																			{
                                       'DiscountName'    => 'EachAdditionalAmount',
                                       'DiscountProfile' => {
                                                            'DiscountProfileID' => $addl_item_cost_profile->{DiscountProfileID},
                                                            'DiscountProfileName' => $addl_item_cost_profile->{DiscountProfileName},
                                                            'EachAdditionalAmount' => [ "$addl_item_cost" ]
                                                            }
                                     };
		

    $sd->{InternationalShippingServiceOption} = [
                                        {
                                          'ShipToLocation' => [ 'Worldwide' ],
                                          'ShippingService' => 'OtherInternational',
                                          'ShippingServiceAdditionalCost' => [ $addl_item_cost ],
                                          'ShippingServiceCost' => [ "$new_cost_row" ],
                                          'ShippingServicePriority' => '1'
                                        },
                                        {
                                          'ShipToLocation' => [ 'CA' ],
                                          'ShippingService' => 'OtherInternational',
                                          'ShippingServiceAdditionalCost' => [ $addl_item_cost ],
                                          'ShippingServiceCost' => [ "$new_cost_ca" ],
                                          'ShippingServicePriority' => '2'
                                        },
                                      ];

	}
	else {
		# No international shipping specified
		#print STDERR Dumper($r);
	  print STDERR "\nWARNING: NO INTL SHIPPING INFORMATION IN LISTING";
		print STDERR "\n  ($item_id) $title\n";

	  print $err_fh qq/$item_id,"$title","No International shipping info (calculated weight?)"\n/;
		next;
	}

  next if ( ! $ozs );# skip this record if we couldn't find a weight

  #
	# FIX CONTENT TAGS (before revising item -- probably wouldn't have to do this if we XMLin'd with different options)
  #
	delete $sd->{CalculatedShippingRate};

  # If there's no discount profile, assume it's free shipping?
	my $flat_addl_amount = $sd->{FlatShippingDiscount}->{DiscountProfile}->{EachAdditionalAmount}->{content} || '0';
	$sd->{FlatShippingDiscount}->{DiscountProfile}->{EachAdditionalAmount} = $flat_addl_amount;

  # Domestic shipping service options (sso)
	for my $sso ( @{ $sd->{ShippingServiceOptions} } ) {
		my $sso_ss_addl_cost = $sso->{ShippingServiceAdditionalCost}->{content} || '0';
		$sso->{ShippingServiceAdditionalCost} = $sso_ss_addl_cost;

		my $sso_ss_cost = $sso->{ShippingServiceCost}->{content} || '0';
		$sso->{ShippingServiceCost} = $sso_ss_cost;
	}

	# Convert the hash into XML
  my $shipping_details_xml = XMLout($sd, NoAttr=>1, RootName=>'ShippingDetails', KeyAttr=>{});

  # Debug the XML before revising item
	if ( $DEBUG ) { 
		print "\n\nShippingDetails:\n",Dumper($sd);
		print "\n\nShipping Details XML:\n",Dumper($shipping_details_xml);
	}

  ################################################################################ 
  # Loop over variations
  ################################################################################ 
  if ( defined $r->{Variations} ) {
    for my $v ( @{$r->{Variatinos}->{Variation}} ) {

      my $var = $v->{VariationSpecifics}->{NameValueList}->{Value};

      if ( ! defined $itemstv->{$title}->{$var} ) {
        print $err_fh qq($item_id,"$title - $var","variation not in database"\n);
        next;
      }

      my $cost = $itemstv->{$title}->{$var}->{cost};

      if ( ! $cost ) {
        print $err_fh qq($item_id,"$title - $var","no cost in database"\n);
        next;
      }
    }
  }
  else {
    # Non-Variation
    my $cost = $itemst->{$title}->{cost};

    if ( ! $cost ) {
      print $err_fh qq($item_id,"$title","no cost in database"\n);
      next;
    }
  }

	#
	# REVISE ITEM
	#
	if ( $REVISE_ITEM ) {
    $header->remove_header('X-EBAY-API-CALL-NAME');
    $header->push_header('X-EBAY-API-CALL-NAME' => 'ReviseFixedPriceItem');

		my $request = $request_reviseitem_default;
		$request =~ s/__ItemID__/$item_id/;
		$request =~ s/__SHIPPING_DETAILS__/$shipping_details_xml/;

		eval {
			my $r = submit_request( $request, $header, 1 ); # return error object if the request fails
			if ( $r->{LongMessage} ) {
				my $error = $r->{LongMessage};
				print $err_fh qq/\n$item_id,"$title","$error"\n/;
				next;
			}
		};
		if ( $@ ) {
				print $err_fh qq/$item_id,"$title","ERROR: Submit ReviseFixedPriceItem failed. $@"\n/;
				next;
		}

    # TODO: update database with weight (if found on ebay but not database)
  
	}

	# Write Output file
	print STDERR "$item_count\t$item_id  $title\n";
	print $outfh qq/\n$item_id,"$title",$ozs,$new_cost_row,$new_cost_ca/;

  # Debugging
	if ( $max_items and $item_count >= $max_items ) {
		print "\nMax Items  : $max_items";
		print "\nItem Count : $max_items";
		last;
	}
}

close $outfh;
close $noweight_fh;
close $err_fh;



exit;

####################################################################################################
sub submit_request {
	my ($request, $objHeader,$return_error) = @_;
  my ($objRequest, $objUserAgent, $objResponse);
  my $request_sent_attempts = 0;

  RESEND_REQUEST:
  $request_sent_attempts++;

  # Create UserAgent and Request objects
  $objUserAgent = LWP::UserAgent->new;
  $objRequest   = HTTP::Request->new(
    "POST",
    "https://api.ebay.com/ws/api.dll",
    $objHeader,
    $request
  );

	#print "\n objHeader : ",Dumper($objHeader);
	#print "\n request   : ",Dumper($request);
	#print "\n objRequest: ",Dumper($objRequest);

  # Submit Request
  $objResponse = $objUserAgent->request($objRequest);		# SEND REQUEST

  # Parse Response object to get Acknowledgement 
	my $content =  $objResponse->content;

	my $response_hash;
  if (!$objResponse->is_error ) {
	  $response_hash = XMLin( "$content",  ForceArray=>['InternationalShippingServiceOption','ShippingServiceOptions','ShipToLocation','Variation'] );
  }
  else {
    print Dumper($objResponse);
    die "\n\nERROR: API call failed";
  }

  my  $ack = $response_hash->{Ack} || 'No acknowledgement found';

  if ($ack =~ /success/i ) {
    return $response_hash;
  }
  else {
		print "\n\n";
    print "\nStatus          : FAILED";
	  print "\nRequest         : ", Dumper( $request );
    print "\nResponse msg.   : ", Dumper( $response_hash->{Errors} );
		#print $objResponse->error_as_HTML;

    # Resend update request
    if ( $request_sent_attempts < 1 ) {
      print  "Attempting to resend update request.\n";
      goto RESEND_REQUEST;
    }

		# Return error information if requested
		if ( $return_error ) { 
			return $response_hash->{Errors}; 
		} else { 
			die; 
		}

  }

} # end submit_request()

